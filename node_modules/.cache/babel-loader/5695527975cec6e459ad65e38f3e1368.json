{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAOJF9yufNHC-bAVKgW3IItCLLDxPJ1u6Q\",\n  authDomain: \"tudor-clth.firebaseapp.com\",\n  projectId: \"tudor-clth\",\n  storageBucket: \"tudor-clth.appspot.com\",\n  messagingSenderId: \"158457805449\",\n  appId: \"1:158457805449:web:21e6684cfeacbd70bae458\"\n};\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconsole.log(\"meow\", firestore.collection(\"users\"));\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {}\n  }\n};\nexport default firebase;","map":{"version":3,"sources":["/home/tudor/Desktop/Tudor-CLTH/src/firebase/firebase.utils.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","initializeApp","auth","firestore","console","log","collection","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","createUserProfileDocument","userAuth","additionalData","userRef","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,4BAFS;AAGrBC,EAAAA,SAAS,EAAE,YAHU;AAIrBC,EAAAA,aAAa,EAAE,wBAJM;AAKrBC,EAAAA,iBAAiB,EAAE,cALE;AAMrBC,EAAAA,KAAK,EAAE;AANc,CAAvB;AASAP,QAAQ,CAACQ,aAAT,CAAuBP,cAAvB;AAEA,OAAO,MAAMQ,IAAI,GAAGT,QAAQ,CAACS,IAAT,EAAb;AACP,OAAO,MAAMC,SAAS,GAAGV,QAAQ,CAACU,SAAT,EAAlB;AACPC,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,SAAS,CAACG,UAAV,CAAqB,OAArB,CAApB;AACA,MAAMC,QAAQ,GAAG,IAAId,QAAQ,CAACS,IAAT,CAAcM,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAMT,IAAI,CAACU,eAAL,CAAqBL,QAArB,CAA/B;AACP,OAAO,MAAMM,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AACf,QAAME,OAAO,GAAGb,SAAS,CAACc,GAAV,CAAe,SAAQH,QAAQ,CAACI,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMH,OAAO,CAACI,GAAR,EAAvB;;AACA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBT,QAA/B;AACA,UAAMU,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMT,OAAO,CAACU,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGT;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOY,KAAP,EAAc,CAAE;AACnB;AACF,CAhBM;AAiBP,eAAelC,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAOJF9yufNHC-bAVKgW3IItCLLDxPJ1u6Q\",\n  authDomain: \"tudor-clth.firebaseapp.com\",\n  projectId: \"tudor-clth\",\n  storageBucket: \"tudor-clth.appspot.com\",\n  messagingSenderId: \"158457805449\",\n  appId: \"1:158457805449:web:21e6684cfeacbd70bae458\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconsole.log(\"meow\", firestore.collection(\"users\"));\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {}\n  }\n};\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}